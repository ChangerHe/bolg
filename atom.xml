<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Changer He&#39;s Home Page</title>
  <subtitle>What doesn&#39;t kill you make you stronger.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/ChangerHe/"/>
  <updated>2017-06-27T15:45:45.196Z</updated>
  <id>https://github.com/ChangerHe/</id>
  
  <author>
    <name>Changer He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SASS学习进阶</title>
    <link href="https://github.com/ChangerHe/2017/06/27/SASS%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6/"/>
    <id>https://github.com/ChangerHe/2017/06/27/SASS学习进阶/</id>
    <published>2017-06-27T11:37:41.000Z</published>
    <updated>2017-06-27T15:45:45.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sass学习进阶"><a href="#sass学习进阶" class="headerlink" title="sass学习进阶"></a>sass学习进阶</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="@if语句"></a>@if语句</h2><p>@if是一个SassScript，它可以根据条件来处理样式快，如果条件为true则返回一个样式块，反之false返回另一个样式块。在sass中除了@if单独使用以外，还可以配合@else if 和@else 一起使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@mixin blockOrHidden($boolean: true)&#123;</div><div class="line">	@if $boolean&#123;</div><div class="line">		@debug &quot;$boolean is #&#123;$boolean&#125;&quot;;  //@debug指令用于调试</div><div class="line">		display: block;</div><div class="line">	&#125;</div><div class="line">	@else &#123;</div><div class="line">		@debug &quot;$boolean is #&#123;$boolean&#125;&quot;;  //@debug指令用于调试</div><div class="line">		display: none;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">.block &#123;</div><div class="line">	@include blockOrHidden;</div><div class="line">&#125;</div><div class="line">.hidden &#123;</div><div class="line">	@include blockOrHidden(false);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出的css为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.block &#123;</div><div class="line">	display: block;</div><div class="line">&#125;</div><div class="line">.hidden &#123;</div><div class="line">	display: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>在制作网格系统的时候，我们都需要使用到.col1~.col12这样的类名，在css中需要一个个去写，但是在sass 中可以很容易地使用@for循环来完成。<br>for循环有两种实现方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@for $i from &lt;start&gt; through &lt;end&gt;   </div><div class="line">//$i表示变量 start表示起始值 end表示结束值</div><div class="line">@for $i form &lt;start&gt; to &lt;end&gt;  </div><div class="line">//二者区别是，关键字through表示包括end这个数，而to表示不包括end这个数</div></pre></td></tr></table></figure></p>
<p>@for循环在网格系统生成每个格子的class代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$grid-prefix: span;</div><div class="line">$grid-width: 60px;</div><div class="line">$grid-gutter: 20px;</div><div class="line">%grid &#123;</div><div class="line">	float: left;</div><div class="line">	margin-left: $grid-gutter /2;</div><div class="line">	margin-right: $grid-gutter /2;</div><div class="line">&#125;</div><div class="line">@for $i form 1 through 12 &#123;</div><div class="line">	.#&#123;$grid-prefix&#125;#&#123;$i&#125;&#123;</div><div class="line">		width: $grid-width * $i + $grid-gutter * ($i - 1);</div><div class="line">		@extend %grid;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出的css为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">.span1, .span2, .span3, .span4, .span5, .span6, .span7, .span8, .span9, .span10, .span11, .span12 &#123;</div><div class="line">  float: left;</div><div class="line">  margin-left: 10px;</div><div class="line">  margin-right: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span1 &#123;</div><div class="line">  width: 60px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span2 &#123;</div><div class="line">  width: 140px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span3 &#123;</div><div class="line">  width: 220px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span4 &#123;</div><div class="line">  width: 300px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span5 &#123;</div><div class="line">  width: 380px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span6 &#123;</div><div class="line">  width: 460px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span7 &#123;</div><div class="line">  width: 540px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span8 &#123;</div><div class="line">  width: 620px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span9 &#123;</div><div class="line">  width: 700px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span10 &#123;</div><div class="line">  width: 780px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span11 &#123;</div><div class="line">  width: 860px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span12 &#123;</div><div class="line">  width: 940px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将上面的实例做一些修改，将@for through方式换成@for to：：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@for $i from 1 to 13 &#123;</div><div class="line">	.#&#123;$grid-prefix&#125;#&#123;$i&#125;&#123;</div><div class="line">		width: $grid-width * $i + $grid-gutter * ($i - 1);</div><div class="line">		@extend %grid;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="@while循环"></a>@while循环</h2><p>@while指令也需要SassScript表达式，并且会生成不同的代码块，直到表达式值为false时停止循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$types: 4;</div><div class="line">$type-width: 20px;</div><div class="line">@while $types &gt; 0&#123;      //等价于while( types = 4 , types &gt; 0);</div><div class="line">	.while-#&#123;$types&#125;&#123;   //等价于.while-types&#123;</div><div class="line">		width: $types-width + $types; //等价于width： 20px - types；</div><div class="line">	&#125;</div><div class="line">	$types: $types - 1;  //等价于  4--；</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="each循环"><a href="#each循环" class="headerlink" title="@each循环"></a>@each循环</h2><p>@each循环就是去遍历一个列表，然后从列表中取出对应的值。<br>@each命令的形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@each $var in &lt;list&gt;</div></pre></td></tr></table></figure></p>
<p>$var 是一个变量名，list是一个列表，用于进行引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$list: adam john wynn mason kuroir; //列出列表，供下面进行引用</div><div class="line">@mixin author-images &#123;</div><div class="line">	@each $author in $list &#123;</div><div class="line">		.photo-#&#123;$author&#125;&#123;</div><div class="line">			background: url(&quot;images/avatars/#&#123;$author&#125;.png&quot;) no-repeat;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">.author-bio &#123;</div><div class="line">	@include author-images;</div><div class="line">&#125;</div><div class="line">//编译出的css为</div><div class="line">.author-bio .photo-adam &#123;</div><div class="line">  background: url(&quot;/images/avatars/adam.png&quot;) no-repeat; &#125;</div><div class="line">.author-bio .photo-john &#123;</div><div class="line">  background: url(&quot;/images/avatars/john.png&quot;) no-repeat; &#125;</div><div class="line">.author-bio .photo-wynn &#123;</div><div class="line">  background: url(&quot;/images/avatars/wynn.png&quot;) no-repeat; &#125;</div><div class="line">.author-bio .photo-mason &#123;</div><div class="line">  background: url(&quot;/images/avatars/mason.png&quot;) no-repeat; &#125;</div><div class="line">.author-bio .photo-kuroir &#123;</div><div class="line">  background: url(&quot;/images/avatars/kuroir.png&quot;) no-repeat; &#125;</div></pre></td></tr></table></figure></p>
<h1 id="sass函数"><a href="#sass函数" class="headerlink" title="sass函数"></a>sass函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p>sass的字符串函数主要包括两个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">unquote($string); </div><div class="line">//删除字符串中的引号，如果字符串中没有引号，将返回原始字符串。注：unquote()函数只能删除字符串最前和最后的引号，无法删除字符串中间的引号。</div><div class="line">quote($string);  </div><div class="line">//给字符串添加引号，如果字符串中间有引号或空格时，需要用单引号或者双引号括起，否则编译时会报错。</div></pre></td></tr></table></figure></p>
<h2 id="字符串函数To-upper-case-和To-lower-case"><a href="#字符串函数To-upper-case-和To-lower-case" class="headerlink" title="字符串函数To-upper-case()和To-lower-case()"></a>字符串函数To-upper-case()和To-lower-case()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">To-upper-case():将字符串的小写字母转换成大写字母</div><div class="line">To-lower-case():将字符串的啊写字母转换成小写字母</div></pre></td></tr></table></figure>
<h2 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">percentage($value)：将一个不带单位的数转换成百分比值；</div><div class="line">round($value)：将数值四舍五入，转换成一个最接近的整数； 0.4999视为0</div><div class="line">ceil($value)：将大于自己的小数转换成下一位整数；  0.0001视为1</div><div class="line">floor($value)：将一个数去除他的小数部分；   0.0001视为0</div><div class="line">abs($value)：返回一个数的绝对值；   </div><div class="line">min($numbers…)：找出几个数值之间的最小值；</div><div class="line">max($numbers…)：找出几个数值之间的最大值；</div><div class="line">random(): 获取随机数</div></pre></td></tr></table></figure>
<h2 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h2><p>列表函数主要包括一些对列表参数的函数使用，主要包括以下几种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">length($list)：返回一个列表的长度值； //括号内的值算一个</div><div class="line">nth($list, $n)：返回一个列表中指定的某个标签值，$n表示第几个</div><div class="line">join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；</div><div class="line">append($list1, $val, [$separator])：将某个值放在列表的最后；</div><div class="line">zip($lists…)：将几个列表结合成一个多维的列表；</div><div class="line">index($list, $value)：返回一个值在列表中的位置值。以1开始</div></pre></td></tr></table></figure></p>
<h2 id="Introspection函数"><a href="#Introspection函数" class="headerlink" title="Introspection函数"></a>Introspection函数</h2><p>Introspection函数包括了几个判断型函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">type-of($value)：返回一个值的类型</div><div class="line">unit($number)：返回一个值的单位</div><div class="line">unitless($number)：判断一个值是否带有单位</div><div class="line">comparable($number-1, $number-2)：判断两个值是否可以做加、减和合并</div></pre></td></tr></table></figure></p>
<h2 id="sass-Maps函数"><a href="#sass-Maps函数" class="headerlink" title="sass Maps函数"></a>sass Maps函数</h2><p>借助于map功能，为同一量下，多个有名字的变量进行处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">map-get($map,$key)：根据给定的 key 值，返回 map 中相关的值。</div><div class="line">map-merge($map1,$map2)：将两个 map 合并成一个新的 map。</div><div class="line">map-remove($map,$key)：从 map 中删除一个 key，返回一个新 map。</div><div class="line">map-keys($map)：返回 map 中所有的 key。</div><div class="line">map-values($map)：返回 map 中所有的 value。</div><div class="line">map-has-key($map,$key)：根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。</div><div class="line">keywords($args)：返回一个函数的参数，这个参数可以动态的设置 key 和 value。</div></pre></td></tr></table></figure></p>
<h1 id="sass的-规则"><a href="#sass的-规则" class="headerlink" title="sass的@规则"></a>sass的@规则</h1><p>sass支持所有css3的@规则，以及一些sass专属的规则，也被成为指令。这些规则在sass 中具有不同的功效。</p>
<h2 id="import规则"><a href="#import规则" class="headerlink" title="@import规则"></a>@import规则</h2><p>sass扩展了css的@import规则，使其能够引入scss和sass文件。所有引入的scss文件和sass文件都会被合并输出一个单一的css文件。被导入的文件中所定义的变量或mixins都可以在主文件中使用。<br>sass会在当前目录下寻找其他sass文件，也可以通过:load_paths选项或在命令行中使用–load-path 选项来制定额外的搜索目录。<br>@import根据文件名引入。默认情况下，它会寻找sass文件并直接引入，但是在少数几种情况下，它会被编译成css的@import规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">如果文件的扩展名是 .css。</div><div class="line">如果文件名以 http:// 开头。</div><div class="line">如果文件名是 url()。</div><div class="line">如果 @import 包含了任何媒体查询（media queries）。</div></pre></td></tr></table></figure></p>
<p>如果上述情况都没有出现，且扩展名是.sass或者是.scss，则该名称的sass<br>或scss文件就会被引入。</p>
<h2 id="media规则"><a href="#media规则" class="headerlink" title="@media规则"></a>@media规则</h2><p>sass中的@media规则和css中的使用规则类似，但它有另外一个功能，可以嵌套在css规则中。有点类似于JS中的冒泡功能一样。如果使用@media指令，他将冒泡到外面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.sidebar &#123;</div><div class="line">	width: 300px;</div><div class="line">	@media screen and (orientation: landscape)&#123;</div><div class="line">		width: 500px;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//编译结果</div><div class="line">.sidebar &#123;</div><div class="line">	width: 300px;</div><div class="line">	@media screen and (orientation: landscape)&#123;</div><div class="line">		.sidebar&#123;</div><div class="line">			width: 500px;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="extend规则"><a href="#extend规则" class="headerlink" title="@extend规则"></a>@extend规则</h2><p>sass中的@extend是用来扩展选择器或占位符（类似于继承）</p>
<h2 id="at-root规则"><a href="#at-root规则" class="headerlink" title="@at-root规则"></a>@at-root规则</h2><p>@at-root规则从字面上解释就是跳出根元素。当你选择器嵌套多层之后，想让某个选择器跳出，此时就可以使用@at-root。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">.a &#123;</div><div class="line">	color: red;</div><div class="line">	.b &#123;</div><div class="line">		color: orange;</div><div class="line">		.c &#123;</div><div class="line">			color:yellow;</div><div class="line">			@at-root .d &#123;</div><div class="line">				color: green;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//编译之后</div><div class="line">.a &#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div><div class="line">.a .b&#123;</div><div class="line">	color: orange;</div><div class="line">&#125;</div><div class="line">.a .b .c &#123;</div><div class="line">	color:yellow;</div><div class="line">&#125;</div><div class="line">.d &#123;</div><div class="line">	color: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="debug规则"><a href="#debug规则" class="headerlink" title="@debug规则"></a>@debug规则</h2><p>@debug在sass中是用来调试的，当你在sass的源码中使用了@debug规则之后，sass代码在编译出错时，在命令终端会输出你设置的提示bug：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@debug 10em + 12em;</div><div class="line">//输出内容</div><div class="line">Line 1 DEBUG: 22em;</div></pre></td></tr></table></figure></p>
<h2 id="warn规则"><a href="#warn规则" class="headerlink" title="@warn规则"></a>@warn规则</h2><p>@warn 和@debug 类似，用来帮助我们很好的调试sass。</p>
<h2 id="error"><a href="#error" class="headerlink" title="@error"></a>@error</h2><p>@error 和@debug、@warn 类似，用来帮助我们很好的调试sass。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sass学习进阶&quot;&gt;&lt;a href=&quot;#sass学习进阶&quot; class=&quot;headerlink&quot; title=&quot;sass学习进阶&quot;&gt;&lt;/a&gt;sass学习进阶&lt;/h1&gt;&lt;h2 id=&quot;if语句&quot;&gt;&lt;a href=&quot;#if语句&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="SASS 学习笔记" scheme="https://github.com/ChangerHe/categories/SASS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SASS" scheme="https://github.com/ChangerHe/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>SASS学习笔记</title>
    <link href="https://github.com/ChangerHe/2017/06/27/SASS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/ChangerHe/2017/06/27/SASS学习笔记/</id>
    <published>2017-06-27T07:37:18.000Z</published>
    <updated>2017-06-27T11:35:43.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sass语法"><a href="#Sass语法" class="headerlink" title="Sass语法"></a>Sass语法</h1><p>Sass 有两种语法。 第一种被称为 SCSS (Sassy CSS)，是一个 CSS3 语法的扩充版本。也就是说，所有符合CSS3语法的样式表也都是具有相同语法意义的SCSS文件。另外，SCSS理解大多数CSShacks以及浏览器专属语法，例如IE古老的filter 语法。这种语种语法的样式表文件需要以.scss扩展名。<br>第二种比较老的语法成为缩排语法（或者就称为 “Sass”），提供了一种更简洁的CSS书写方式。它不使用花括号，而是通过缩排的方式来表达选择符的嵌套层级，而且也不使用分号，而是用换行符来分隔属性。很多人认为这种格式比SCSS更容易阅读，书写也更快速。缩排语法具有Sass的所有特色功能,虽然有些语法上稍有差异；这些差异在{file:INDENTED_SYNTAX.md所排语法参考手册}中都有描述。使用此种语法的样式表文件需要以.sass作为扩展名。</p>
<h2 id="sass的转换"><a href="#sass的转换" class="headerlink" title="sass的转换"></a>sass的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 将 Sass 转换为 SCSS</div><div class="line">$ sass-convert style.sass style.scss</div><div class="line"></div><div class="line"># 将 SCSS 转换为 Sass</div><div class="line">$ sass-convert style.scss style.sass</div></pre></td></tr></table></figure>
<p>Sass 有三种使用方式： 命令行工具、独立的 Ruby 模块，以及包含 Ruby on Rails 和 Merb 作为支持 Rack 的框架的插件。 所有这些方式的第一步都是安装 Sass gem：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install sass</div></pre></td></tr></table></figure></p>
<p>如果你使用的是 Windows， 就需要先安装 Ruby。</p>
<p>如果要在命令行中运行 Sass ,只要输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass input.scss output.css</div></pre></td></tr></table></figure></p>
<p>你还可以命令 Sass 监视文件的改动并更新 CSS ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch input.scss:output.css</div></pre></td></tr></table></figure></p>
<p>如果你的目录里有很多 Sass 文件，你还可以命令 Sass 监视整个目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch app/sass:public/stylesheets</div></pre></td></tr></table></figure></p>
<h1 id="sass编译"><a href="#sass编译" class="headerlink" title="sass编译"></a>sass编译</h1><h2 id="命令行编译"><a href="#命令行编译" class="headerlink" title="命令行编译"></a>命令行编译</h2><p>单文件转换命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass style.scss style.css</div></pre></td></tr></table></figure></p>
<p>单文件监听命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch style.scss:style.css</div></pre></td></tr></table></figure></p>
<p>文件夹监听命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch sassFileDirectory:cssFileDirectory</div></pre></td></tr></table></figure></p>
<p>css文件转成sass/scss文件（在线转换工具css2sass）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sass-convert style.css style.sass   </div><div class="line">sass-convert style.css style.scss</div></pre></td></tr></table></figure></p>
<h2 id="编译格式"><a href="#编译格式" class="headerlink" title="编译格式"></a>编译格式</h2><p>我们一般常用的有–style，–sourcemap，–debug-info等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sass --watch style.scss:style.css --style compact</div><div class="line">sass --watch style.scss:style.css --sourcemap</div><div class="line">sass --watch style.scss:style.css --style expanded --sourcemap</div><div class="line">sass --watch style.scss:style.css --debug-info</div></pre></td></tr></table></figure></p>
<p>–style表示解析后的css是什么格式，有四种取值分别为：nested，expanded，compact，compressed。<br>–sourcemap表示开启sourcemap调试。开启sourcemap调试后，会生成一个后缀名为.css.map文件。<br>–debug-info表示开启debug信息，升级到3.3.0之后因为sourcemap更高级，这个debug-info就不太用了。</p>
<h1 id="sass混合宏"><a href="#sass混合宏" class="headerlink" title="sass混合宏"></a>sass混合宏</h1><h2 id="混合宏的关键词"><a href="#混合宏的关键词" class="headerlink" title="混合宏的关键词"></a>混合宏的关键词</h2><p>在sass中通过@mixin关键词声明一个混合宏，那么在实际调用中，其匹配了一个关键词@include来调用声明好的混合宏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@mixin border-radius&#123;   //对混合宏进行声明</div><div class="line">	-webkit-border-radius: 3px;</div><div class="line">	border-radius: 3px;</div><div class="line">&#125;</div><div class="line">button&#123;</div><div class="line">	@include border-radius: 3px;  //对声明出的混合宏进行使用关键字@include调用</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时编译出的css为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">button&#123;</div><div class="line">	-webkit-border-radius: 3px;</div><div class="line">	border: 3px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">## 混合宏的传参</div><div class="line">sass有一个强大的混合宏功能：传参。混合宏传参有以下几种情形：</div><div class="line">### 1.传一个不带值的参数</div></pre></td></tr></table></figure></p>
<p>@mixin border-radius($radius){<br>    -webkit-border-radius: $radius;<br>    border-radius: $radius;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在调用是，给这个混合宏进行参数传递，即可。如，当我想传递给radius传参3px时。代码如下：</div></pre></td></tr></table></figure></p>
<p>.box{<br>    @include border-radius(3px);<br>}<br>此时编译出的结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">	-webkit-border-radius: 3px;</div><div class="line">	border-radius: 3px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-传一个带值的参数"><a href="#2-传一个带值的参数" class="headerlink" title="2.传一个带值的参数"></a>2.传一个带值的参数</h3><p>在sass中可以给参数带一个默认的值，在调用时，就可以直接使用此默认值进行编译，这种情况适用于比较多地方使用默认值的时候，此时可设置一个默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@mixin border-radius($radius: 3px)&#123;</div><div class="line">	-webkit-border-radius: $radius;</div><div class="line">	border-radius: $radius;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-传递多个参数"><a href="#3-传递多个参数" class="headerlink" title="3.传递多个参数"></a>3.传递多个参数</h3><p>sass中不仅可以传递一个参数，还可传递多个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@mixin size($width,$height)&#123;</div><div class="line">	width: $width;</div><div class="line">	height: $height;</div><div class="line">&#125;</div><div class="line">.box-center&#123;</div><div class="line">	@include size(500px,300px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="sass扩展"><a href="#sass扩展" class="headerlink" title="sass扩展"></a>sass扩展</h1><h3 id="sass继承"><a href="#sass继承" class="headerlink" title="sass继承"></a>sass继承</h3><p>sass可以继承类中的样式代码块，在sass中是通过关键字@extend来继承已经存在的类样式块的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.btn&#123;</div><div class="line">	border: 1px solid #ccc;</div><div class="line">	padding: 6px 10px;</div><div class="line">	font-size: 14px;</div><div class="line">&#125;</div><div class="line">.btn-primary&#123;</div><div class="line">	background: #f36;</div><div class="line">	color: #fff;</div><div class="line">	@extend: .btn;</div><div class="line">&#125;</div><div class="line">.btn-second&#123;</div><div class="line">	background: orange;</div><div class="line">	color: #fff;</div><div class="line">	@extend .btn;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出的结果是精简的写法，不想之前通过@include进行编译的一样，通过@include编译出来的是没有简化写法的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.btn,.btn-primary,.btn-second&#123;</div><div class="line">	border: 1px solid #ccc;</div><div class="line">	padding: 6px 10px;</div><div class="line">	font-size: 14px;</div><div class="line">&#125;</div><div class="line">.btn-primary&#123;</div><div class="line">	background: #f36;</div><div class="line">	color: #fff;</div><div class="line">&#125;</div><div class="line">.btn-second&#123;</div><div class="line">	background: orange;</div><div class="line">	color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="sass占位符（-placeholder）"><a href="#sass占位符（-placeholder）" class="headerlink" title="sass占位符（%placeholder）"></a>sass占位符（%placeholder）</h3><p>占位符（%placeholder）声明的代码，如果不被@extend调用的话，不会产生任何代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%mt5&#123;</div><div class="line">	margin-top: 5px;</div><div class="line">&#125;</div><div class="line">%pt5&#123;</div><div class="line">	padding-top: 5px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码若不被@extend调用，则不会产生任何代码块，但是当调用的时候，该代码块才会生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.btn&#123;</div><div class="line">	@extend %mt5;</div><div class="line">	@extend %pt5;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时解析出的结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.btn&#123;</div><div class="line">	margin-top: 5px;</div><div class="line">	padding-top: 5px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用混合宏，继承，占位符的方式和使用对象比较"><a href="#使用混合宏，继承，占位符的方式和使用对象比较" class="headerlink" title="使用混合宏，继承，占位符的方式和使用对象比较"></a>使用混合宏，继承，占位符的方式和使用对象比较</h2><p>!(PIC)[<a href="http://img.mukewang.com/55263aa30001913307940364.jpg" target="_blank" rel="external">http://img.mukewang.com/55263aa30001913307940364.jpg</a>]</p>
<h3 id="sass插值"><a href="#sass插值" class="headerlink" title="sass插值#{}"></a>sass插值#{}</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@mixin firefox-message($selector)&#123;</div><div class="line">	body.firefox #&#123;$selector&#125;:before&#123;</div><div class="line">		content : &quot;Hi, firefox users!&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">@include firefox-message(&quot;.header&quot;);</div><div class="line">//编译结果为</div><div class="line">body.forefox .header:before&#123;</div><div class="line">	content: &quot;Hi,firefox users!&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="sass运算"><a href="#sass运算" class="headerlink" title="sass运算"></a>sass运算</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">	width: 20px + 8in;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$full-width: 960px;</div><div class="line">$sidebar-width: 200px;</div><div class="line">.content&#123;</div><div class="line">	width: $full-width - $sidebar-width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p>乘法只能乘以一个数字，不能乘以一个数字加上单位，否则会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">	width: 10px *2px;  //报错“20px*px isn&apos;t a valid CSS value.”</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><p>除法在应用时，需要加上括号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">	width: (100px / 2);</div><div class="line">&#125;</div><div class="line">//编译后等价于</div><div class="line">.box&#123;</div><div class="line">	width: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当使用变量或者其他运算常亮进行计算时，可以不加括号。</p>
<h2 id="字符运算"><a href="#字符运算" class="headerlink" title="字符运算"></a>字符运算</h2><p>在sass中可以使用符号+来实现字符串的链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$content: &quot;hello&quot; + &quot; &quot; + &quot;sass!&quot;;</div><div class="line">.box: before&#123;</div><div class="line">	ontent: &quot;#&#123;$content&#125;&quot;;</div><div class="line">&#125;</div><div class="line">//编译后等价于</div><div class="line">.box: before&#123;</div><div class="line">	content: &quot;hello sass!&quot;;</div><div class="line">&#125;</div><div class="line">除了在变量中做字符连接运算以外，还可以直接通过加号把字符连在一起</div></pre></td></tr></table></figure></p>
<p>div{<br>    cursor: e + -resize;<br>}<br>//编译后等价于<br>div{<br>    cursor: e-resize;<br>}<br>```<br>注意，如果有引号的字符串被添加了一个没有引号的字符串，结果会是一个有引号的字符串。<br>同样的，如果一个没有引号的字符串被添加了一个有引号的字符串，结果将是一个没有引号的字符串。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Sass语法&quot;&gt;&lt;a href=&quot;#Sass语法&quot; class=&quot;headerlink&quot; title=&quot;Sass语法&quot;&gt;&lt;/a&gt;Sass语法&lt;/h1&gt;&lt;p&gt;Sass 有两种语法。 第一种被称为 SCSS (Sassy CSS)，是一个 CSS3 语法的扩充版本。也
    
    </summary>
    
      <category term="SASS 学习笔记" scheme="https://github.com/ChangerHe/categories/SASS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SASS" scheme="https://github.com/ChangerHe/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>接口和抽象类的区别</title>
    <link href="https://github.com/ChangerHe/2017/06/26/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://github.com/ChangerHe/2017/06/26/接口和抽象类的区别/</id>
    <published>2017-06-26T15:29:53.000Z</published>
    <updated>2017-06-26T15:38:11.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口（interface）和抽象类（abstract）的区别"><a href="#接口（interface）和抽象类（abstract）的区别" class="headerlink" title="接口（interface）和抽象类（abstract）的区别"></a>接口（interface）和抽象类（abstract）的区别</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>1.都位于继承的顶端用于被其他类实现或继承。<br>2.都不能实例化。<br>3.都可以定义抽象方法，其子类都必须参与这些方法。</p>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><p>1.接口没有构造方法，抽象有构造方法。<br>2.抽象类可包含抽象方法和普通方法，接口只能包含抽象方法。<br>3.一个类只能继承一个直接父类，却可以实现多个接口。<br>4.接口里默认是public static final,抽象类型默认是包访问。<br>5.方法：接口里默认是public abstract,抽象类型是包访问。<br>6.内部类：接口里默认是public static,抽象类型是包访问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;接口（interface）和抽象类（abstract）的区别&quot;&gt;&lt;a href=&quot;#接口（interface）和抽象类（abstract）的区别&quot; class=&quot;headerlink&quot; title=&quot;接口（interface）和抽象类（abstract）的区别&quot;&gt;
    
    </summary>
    
      <category term="JAVA 学习笔记" scheme="https://github.com/ChangerHe/categories/JAVA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JAVA" scheme="https://github.com/ChangerHe/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA代码执行顺序解析</title>
    <link href="https://github.com/ChangerHe/2017/06/24/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/ChangerHe/2017/06/24/代码执行顺序解析/</id>
    <published>2017-06-24T14:58:57.000Z</published>
    <updated>2017-06-24T15:35:29.339Z</updated>
    
    <content type="html"><![CDATA[<p>今天的博客记录一道题目，求出以下代码，所打印出的顺序，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class App</div><div class="line">&#123;</div><div class="line">	private static App d = new App();</div><div class="line">	private SubClass t = new SubClass();</div><div class="line">	static</div><div class="line">	&#123;</div><div class="line">		System.out.println(3);</div><div class="line">	&#125;</div><div class="line">	public App()</div><div class="line">	&#123;</div><div class="line">		System.out.println(4);</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args) </div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Hello World!&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">class SuperClass</div><div class="line">&#123;</div><div class="line">	SuperClass()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;SuperClass 构造器&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">class SubClass extends SuperClass</div><div class="line">&#123;</div><div class="line">	static</div><div class="line">	&#123;</div><div class="line">		System.out.println(1);</div><div class="line">	&#125;</div><div class="line">	public SubClass()</div><div class="line">	&#123;</div><div class="line">		System.out.println(2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此题主要考察构造器，类及静态变量、非静态变量，父类，子类在JVM中的调用顺序。<br>答案在我第一次做的时候确实是意想不到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">SuperClass 构造器</div><div class="line">2</div><div class="line">4</div><div class="line">3</div><div class="line">Hello World!</div></pre></td></tr></table></figure></p>
<h2 id="JVM代码块加载原则"><a href="#JVM代码块加载原则" class="headerlink" title="JVM代码块加载原则"></a>JVM代码块加载原则</h2><p>1.优先加载主类以外，与主类相关的其他类，方便主类进行调用。<br>2.如果代码块有static修饰，则优先加载进JVM进行执行。<br>3.子类中的构造器自带一个super（）；方法，且在构造器的第一行代码中，因此当父类的构造器为无参数构造器时，子类将优先调用父类的无参数构造器的内容。</p>
<h2 id="题目中的加载顺序分析"><a href="#题目中的加载顺序分析" class="headerlink" title="题目中的加载顺序分析"></a>题目中的加载顺序分析</h2><p>1.第一个为什么是1，因为主类中的main方法会在其他相关的父类和子类优先调用之后，再进行调用，因此优先进行调用SuperClass和SubClass，在这两个类中，SubClass又是SuperClass的子类，理论上应先行调用父类，但子类中包含静态代码块，因此优先调用static修饰的静态字码快中的内容，从而优先输出“1”；<br>2.为什么第二个是“SuperClass 构造器”，上面优先打印1的原理讲明白了，第二个也就好理解了，子代码块中的构造器自带一个super();的方法，会优先进行调用父类中的无变量构造器。因此打印出“SuperClass 构造器”。<br>3.为什么第三个是数字2，构造器的运行顺序是自顶向下的，因此执行完super();后，就开始执行下一字段，也就是2；<br>4.为什么第四个是数字4？非主类中的其他类已经加载完毕，那么现在开始加载主类，主类中又有一个static修饰的代码块，因此主类优先执行了App();中的打印4，操作<br>5.同样，根据自顶向下原色，执行了打印3的操作。<br>6.也就是最后，打印了main方法中的“Hello World!”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天的博客记录一道题目，求出以下代码，所打印出的顺序，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div clas
    
    </summary>
    
      <category term="JAVA 学习笔记" scheme="https://github.com/ChangerHe/categories/JAVA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JAVA" scheme="https://github.com/ChangerHe/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>不同排序算法的JAVA实现及性能比较</title>
    <link href="https://github.com/ChangerHe/2017/06/22/%E4%B8%8D%E5%90%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84JAVA%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <id>https://github.com/ChangerHe/2017/06/22/不同排序算法的JAVA实现及性能比较/</id>
    <published>2017-06-22T13:56:51.000Z</published>
    <updated>2017-06-22T15:41:00.010Z</updated>
    
    <content type="html"><![CDATA[<p>排序现在已学的有两种，冒泡排序（BubbleSort）和选择排序（SelectionSort），两种方法各有不同；</p>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序是将数组中的元素进行逐一比较，并将两者比较之后的较大值与后面第三位元素进行比较。进行循环后，第一次可得到数组中的最大值，且最大值在数组的最后一个位置上。<br>通过JAVA进行实现的大概思路是：将第一位元素与第二位进行比较，将较大值赋给第二位元素，较小值赋给第一位元素，然后再将第二位元素与第三位元素进行比较，照此进行循环，最终可将最大数移至数组最后一位。<br>进行第二次运算，则使用相同的计算方式，得到第二大的元素，并赋予给倒数第二个元素。<br>进行运算后，可得到顺序排列的数组。<br>因此，冒泡排序要实现排序，如果有一个数组有N个元素，需要经过N！次，才能得到顺序排列的数组，且每次循环都要进行数组调换，大大影响了排序性能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//冒泡排序的算法</div><div class="line">class BubbleSort </div><div class="line">&#123;</div><div class="line">	public static void main(String[] args) </div><div class="line">	&#123;</div><div class="line">		int[] arr = &#123;2 ,6 ,9 ,1 ,4 ,7&#125;;</div><div class="line">		int a;</div><div class="line">		for ( int i = 0; i &lt; arr.length-1 ; i++ )</div><div class="line">		&#123;</div><div class="line">			for ( int j = 0 ; j &lt; arr.length-1-i ; j++ )</div><div class="line">			&#123;</div><div class="line">				if ( arr[j] &gt; arr[j+1])</div><div class="line">				&#123;</div><div class="line">					a = arr[j];</div><div class="line">					arr[j] = arr[j+1];</div><div class="line">					arr[j+1] = a;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		String PrintArr = &quot;[&quot;;    //打包成字符输出</div><div class="line">		for ( int i = 0; i &lt; arr.length ; i++ )   </div><div class="line">		&#123;</div><div class="line">			PrintArr = PrintArr + arr[i];</div><div class="line">			if ( i == arr.length-1 )</div><div class="line">			&#123;</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			PrintArr = PrintArr + &quot;,&quot;;</div><div class="line">		&#125;</div><div class="line">		PrintArr = PrintArr + &quot;]&quot;;</div><div class="line">		System.out.println(PrintArr);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序的方法是将数组中的第一个元素和数组的其他元素逐一进行比较，将比较之后的较小值赋予给第一个元素。遍历一次后，数组的第一个元素可获得数组中的最小值。<br>第二次遍历从第三个元素开始，将其与第二个元素进行比较，较小值赋予给第二个元素。<br>以此类推，可知选择排序的比较次数依旧为N！次。但选择排序时不需将元素进行多次的调换，因此性能方面较冒泡排序有些许提升。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//选择排序的算法</div><div class="line">class SelectionSort</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args) </div><div class="line">	&#123;</div><div class="line">		int[] arr = &#123;2 ,6 ,9 ,1 ,4 ,7&#125;;</div><div class="line">		int a;</div><div class="line">		for ( int i = 0; i&lt; arr.length ; i++ )</div><div class="line">		&#123;</div><div class="line">			for ( int j = i; j &lt; arr.length ; j++ )</div><div class="line">			&#123;</div><div class="line">				if ( arr[i] &gt; arr[j] )</div><div class="line">				&#123;</div><div class="line">					a = arr[i];</div><div class="line">					arr[i] = arr[j];</div><div class="line">					arr[j] = a;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		String PrintArr = &quot;[&quot;;    //打包成字符输出</div><div class="line">		for ( int i = 0; i &lt; arr.length ; i++ )   </div><div class="line">		&#123;</div><div class="line">			PrintArr = PrintArr + arr[i];</div><div class="line">			if ( i == arr.length-1 )</div><div class="line">			&#123;</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			PrintArr = PrintArr + &quot;,&quot;;</div><div class="line">		&#125;</div><div class="line">		PrintArr = PrintArr + &quot;]&quot;;</div><div class="line">		System.out.println(PrintArr);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>选择排序还可进行算法优化，每次遍历只与便利到的最小值进行交换，这样可以再减少一些数值交换次数，但笔者尚未实现，待实现完毕再更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序现在已学的有两种，冒泡排序（BubbleSort）和选择排序（SelectionSort），两种方法各有不同；&lt;/p&gt;
&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;
    
    </summary>
    
      <category term="JAVA 学习笔记" scheme="https://github.com/ChangerHe/categories/JAVA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JAVA" scheme="https://github.com/ChangerHe/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>杨辉三角的JAVA实现</title>
    <link href="https://github.com/ChangerHe/2017/06/22/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E7%9A%84JAVA%E5%AE%9E%E7%8E%B0/"/>
    <id>https://github.com/ChangerHe/2017/06/22/杨辉三角的JAVA实现/</id>
    <published>2017-06-22T13:56:17.000Z</published>
    <updated>2017-06-22T15:41:09.527Z</updated>
    
    <content type="html"><![CDATA[<p>杨辉三角，是二项式系数在三角形中的一种几何排列。在欧洲，这个表叫做帕斯卡三角形。帕斯卡（1623—-1662）是在1654年发现这一规律的，比杨辉要迟393年，比贾宪迟600年。<br>没有参考网上的代码，自己手撸了一遍杨辉三角。主要依据是根据杨辉三角的特性，行数等于列数乘二加一。输入想要得到的杨辉三角层数，即可得到相应的杨辉三角数字列表。中间的空格直接使用0来表示了，所以感觉我的代码比网上的很多代码简洁了很多：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//杨辉三角的JAVA实现</div><div class="line">class  YangHuiSanJiao</div><div class="line">&#123;</div><div class="line">	static void putIn(int m)&#123;</div><div class="line">		int n  = m*2-1;     //根据杨辉三角特性，行数等于列数乘二加一</div><div class="line">		int[][] arr = new int[m][n];  //新建数组</div><div class="line">		arr[0][m-1] = 1;</div><div class="line">		for ( int i = 0; i &lt; m-2 ; i++ )</div><div class="line">		&#123;</div><div class="line">			for ( int j = 0; j &lt; n-2 ; j++ )</div><div class="line">			&#123;</div><div class="line">				arr[i+1][j+1] = arr[i][j] + arr[i][j+2]; //将当列的第J个数和第J+2个数，赋值给下一列的J+1个数（因为i和j初始为0）</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		for (int i = 0; i &lt; m-1 ; i++ )</div><div class="line">		&#123;</div><div class="line">			for (int j = 0; j &lt; n ; j++ )</div><div class="line">			&#123;</div><div class="line">				System.out.print(arr[i][j]+ &quot;\t&quot;);  //遍历数组，将值逐一打印</div><div class="line">			&#125;</div><div class="line">			System.out.println();  //打印换行</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	public static void main(String[] args) </div><div class="line">	&#123;</div><div class="line">		putIn(10);    //输入想要得到的杨辉三角层数</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为其实可以把整个数组进行遍历，然后通过强制类型转换将0转为空格的，这个还没转。代码以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杨辉三角，是二项式系数在三角形中的一种几何排列。在欧洲，这个表叫做帕斯卡三角形。帕斯卡（1623—-1662）是在1654年发现这一规律的，比杨辉要迟393年，比贾宪迟600年。&lt;br&gt;没有参考网上的代码，自己手撸了一遍杨辉三角。主要依据是根据杨辉三角的特性，行数等于列数乘
    
    </summary>
    
      <category term="JAVA 学习笔记" scheme="https://github.com/ChangerHe/categories/JAVA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JAVA" scheme="https://github.com/ChangerHe/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>斐波那契数列和九九乘法表在JAVA中的实现</title>
    <link href="https://github.com/ChangerHe/2017/06/21/Java-Learning/"/>
    <id>https://github.com/ChangerHe/2017/06/21/Java-Learning/</id>
    <published>2017-06-21T15:05:45.000Z</published>
    <updated>2017-06-22T15:38:01.767Z</updated>
    
    <content type="html"><![CDATA[<p>今日成功完成斐波那契数列及九九乘法表在JAVA中的实现，哈哈哈哈没看教程就了解了一下语法然后自己撸出来的，有点儿小自豪。</p>
<h1 id="斐波那契数列（Fibonacci-sequence）"><a href="#斐波那契数列（Fibonacci-sequence）" class="headerlink" title="斐波那契数列（Fibonacci sequence）"></a>斐波那契数列（Fibonacci sequence）</h1><p>斐波那契数列又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从1963起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。<br>解决该问题JAVA实现的主要思路是：先确定斐波那契数列第一项和第二项值，然后使用递归方式，将方法进行嵌套，通过函数执行，就可以实现斐波那契数列啦！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//求斐波那契数列的第n项值</div><div class="line">public class FebNachi</div><div class="line">&#123;</div><div class="line">	</div><div class="line">	static int FebNachi(int i)&#123;</div><div class="line">		switch ( i )</div><div class="line">		&#123;</div><div class="line">		case 1 : return 0;</div><div class="line">		case 2 : return 1;</div><div class="line">		default : return FebNachi(i -1) + FebNachi(i - 2);</div><div class="line">		</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args)&#123;</div><div class="line">		System.out.println(FebNachi(4));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="九九乘法表（MultiplicationTable）"><a href="#九九乘法表（MultiplicationTable）" class="headerlink" title="九九乘法表（MultiplicationTable）"></a>九九乘法表（MultiplicationTable）</h1><p>这个就不多说了，小学都背过，主要实现方式是通过循环的嵌套，结合if判断语句，进行输出即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//使用Java输出九九乘法表</div><div class="line">public class  MultiplicationTable</div><div class="line">&#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) </div><div class="line">	&#123;</div><div class="line">		int i;</div><div class="line">		int j;</div><div class="line">		for ( i = 1; i &lt;= 9 ; i++ )</div><div class="line">		&#123;</div><div class="line">			</div><div class="line">			for ( j = 1; j &lt;= 9 ; j++)</div><div class="line">			&#123;</div><div class="line">				if ( i == j)</div><div class="line">			&#123;</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">				System. out. print(i+&quot; + &quot;+j+&quot; = &quot;+(i + j)+&quot;\t&quot;);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			System. out. println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，今天是学习JAVA的第二天，感觉这个和JS真的很像啊，再奉上今天学到的“锚”方法，在return或break时，对return或break的对象进行定向：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args)</div><div class="line">&#123;</div><div class="line">	outter: for( int line = 1; line &lt;= 9; i++)</div><div class="line">	&#123;</div><div class="line">		for( int i = 1; i &lt;= line; i++)</div><div class="line">		&#123;</div><div class="line">			if( line == 5)</div><div class="line">			&#123;</div><div class="line">				break outter;     //此时并非结束此次i的for循环，而是直接跳出所有循环</div><div class="line">			&#125;</div><div class="line">			System. out. print( i + &quot;*&quot; + line + &quot;=&quot; + ( i + line ) + &quot;\t&quot;);  //输出九九乘法表</div><div class="line">		&#125;</div><div class="line">		System. out. println(); //输出换行符</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日成功完成斐波那契数列及九九乘法表在JAVA中的实现，哈哈哈哈没看教程就了解了一下语法然后自己撸出来的，有点儿小自豪。&lt;/p&gt;
&lt;h1 id=&quot;斐波那契数列（Fibonacci-sequence）&quot;&gt;&lt;a href=&quot;#斐波那契数列（Fibonacci-sequence）
    
    </summary>
    
      <category term="JAVA 学习笔记" scheme="https://github.com/ChangerHe/categories/JAVA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 和 JAVA 在数据类型方面的异同</title>
    <link href="https://github.com/ChangerHe/2017/06/21/The-Data-Type-Differences-of-JavaScript-and-Java/"/>
    <id>https://github.com/ChangerHe/2017/06/21/The-Data-Type-Differences-of-JavaScript-and-Java/</id>
    <published>2017-06-20T16:30:42.000Z</published>
    <updated>2017-06-22T15:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是开始学习JAVA的第一天，对照着教程敲了一遍代码，配置了一下JAVA的运行环境，不知不觉一天就这样过去了，反倒是真正花在了解JAVA这门语言上面的时间却少了些。<br>初了解了JAVA数据类型的知识，发现确实是和之前学习的C++,JavaScript（之后统一称JS）有异曲同工之妙，但是相比于JS来说，个人认为Java的数据结构及类型配置是更加严谨的，毕竟James Gosling 大大花了几年时间开发出了这门语言。而JavaScript这门语言由 Brendan Eich 花了十天就设计出来了，哈哈哈哈哈哈哈不得不佩服这些大大大佬们。</p>
<h2 id="变量初始化问题"><a href="#变量初始化问题" class="headerlink" title="变量初始化问题"></a>变量初始化问题</h2><p>当我使用JS时，定义变量但不给其赋值，可输出undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	var a;</div><div class="line">	console.log(a);      //a</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>但是当我使用Java时，未给其定义时，将会在编译时直接报错，无法正常完成编译操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class example</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int a;</div><div class="line">		System. out. println(a);     //错误</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>JS中，如果对变量定义的话，会有全局变量和局部变量之分。Java中也是一样，这是他们的相同之处。但是我们来看这样一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	var a = 2;</div><div class="line">	var a = 3;</div><div class="line">	console.log(a);    //3</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这是使用JS进行输出的结果，JS正常输出3，我们再看在Java中的输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class example</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int a = 2;</div><div class="line">		int a = 3;</div><div class="line">		System. out. println(a);  //错误</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在重复定义了其局部变量的情况下，JAVA仍旧会报错。不仅仅是这样，还有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class example</div><div class="line">&#123;</div><div class="line">	int a = 2;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		System. out. println(a);   //错误</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是个什么鬼，作为一个学了JS的小朋友不淡定了，我明明在全局中定义了a的值了呀，为什么还会报错，原来是少了样东西：需要在对a进行定义时加上static，具体个中原因，查了资料，资料是这样写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">产生此现象的原因是无法从静态上下文中引用非静态变量，因为main方法是static的,如果想用main方法直接去调用方法或者属性的话必须是static的。当然,如果实例化出一个对象的话,那么定义的变量就可以不是static的。</div></pre></td></tr></table></figure></p>
<p>也就是说，对于这种情况，有两种解决方案：</p>
<h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">        static int i;</div><div class="line">        public static void main(String[] args)&#123;</div><div class="line">                System.out.println(i);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">        int i;</div><div class="line">        public static void main(String[] args)&#123;</div><div class="line">                System.out.println(new Test().i);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为new了一个Test类的实例,所以可以直接去调用Test的属性跟方法。</p>
<h2 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h2><p>JS中的加法有一个很好玩的地方，我们来看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	var a = 0.1;</div><div class="line">	var b = 0.2;</div><div class="line">	console.log(a + b);     //0.30000000000000004</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>但是笔者在JAVA中亲测，也是一模一样啊有木有（当然，这个时候JAVA就要改一下数据类型了，这个在JS中是不需要的）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class example</div><div class="line">&#123;</div><div class="line">	static double a = 0.1D;</div><div class="line">	static double b = 0.2D;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		System. out. println(a + b);    //0.30000000000000004</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于这种现象，网上的大神们的解释是这样子的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">十进制0.1</div><div class="line">=&gt; 二进制0.00011001100110011…(循环0011) </div><div class="line">=&gt;尾数为1.1001100110011001100…1100（共52位，除了小数点左边的1），指数为-4（二进制移码为00000000010）,符号位为0</div><div class="line">=&gt; 计算机存储为：0 00000000100 10011001100110011…11001</div><div class="line">=&gt; 因为尾数最多52位，所以实际存储的值为0.00011001100110011001100110011001100110011001100110011001</div><div class="line">而十进制0.2</div><div class="line">=&gt; 二进制0.0011001100110011…(循环0011)</div><div class="line">=&gt;尾数为1.1001100110011001100…1100（共52位，除了小数点左边的1），指数为-3（二进制移码为00000000011）,符号位为0</div><div class="line">=&gt; 存储为：0 00000000011 10011001100110011…11001</div><div class="line">因为尾数最多52位，所以实际存储的值为0.00110011001100110011001100110011001100110011001100110011</div><div class="line"> 　　　那么两者相加得：    </div><div class="line">0.00011001100110011001100110011001100110011001100110011001</div><div class="line">+  0.00110011001100110011001100110011001100110011001100110011　</div><div class="line">=  0.01001100110011001100110011001100110011001100110011001100</div><div class="line">转换成10进制之后得到:0.30000000000000004”</div></pre></td></tr></table></figure></p>
<p>简单来讲，还是单精度和双精度浮点运算时的误差了，不过当我把两数据设置为单精度float数时，此现象就没有了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class example</div><div class="line">&#123;</div><div class="line">	static float a = 0.1f;</div><div class="line">	static float b = 0.2f;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		System. out. println(a + b);     //0.3</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>充分证明了</p>
<p>卧槽我想说证明了什么？</p>
<p>反正不懂，先记着吧，反正是菜鸟~<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1498578247&amp;di=6d2ed02b13e4a711c1765b55065567c8&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20160429%2F82de753dbb0d4de6b061fbbbe08eb6b8_th.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是开始学习JAVA的第一天，对照着教程敲了一遍代码，配置了一下JAVA的运行环境，不知不觉一天就这样过去了，反倒是真正花在了解JAVA这门语言上面的时间却少了些。&lt;br&gt;初了解了JAVA数据类型的知识，发现确实是和之前学习的C++,JavaScript（之后统一称JS）
    
    </summary>
    
      <category term="JAVA 学习笔记" scheme="https://github.com/ChangerHe/categories/JAVA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JAVA &amp; JavaScript" scheme="https://github.com/ChangerHe/tags/JAVA-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>阿里妈妈iconfont矢量图标字体的用法</title>
    <link href="https://github.com/ChangerHe/2017/06/18/The-Usages-Of-Iconfont/"/>
    <id>https://github.com/ChangerHe/2017/06/18/The-Usages-Of-Iconfont/</id>
    <published>2017-06-18T14:30:39.000Z</published>
    <updated>2017-06-22T15:40:42.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Iconfont是什么？"><a href="#Iconfont是什么？" class="headerlink" title="Iconfont是什么？"></a>Iconfont是什么？</h1><p>iconfont是由阿里妈妈出品，国内射鸡师妹妹和前端小哥哥/小姐姐们常去的学（gao）习（ji）网站，网站上面都是一些“高清无码”的矢量图标，相比于使用单一的小png和使用spirit来说大大减少了与服务器握手次数，可以提升网页打开效率。</p>
<h1 id="Iconfont使用方法"><a href="#Iconfont使用方法" class="headerlink" title="Iconfont使用方法"></a>Iconfont使用方法</h1><p>1.我们先一起打开这个国内打大型同性交友网站<a href="http://www.iconfont.cn" target="_blank" rel="external">http://www.iconfont.cn</a> ，然后点击“图标库”，可以使用自己的github登陆，登陆后就可以根据自己的需要进行查找图标，海量图标等你约哟。<br><img src="http://jns.img.bucket.ks3-cn-beijing.ksyun.com/skill/daily/08d77494-c969-4ba1-a915-e59a8f2f4786.png" alt="PIC"><br>2.将需要的图标添加到购物车形状里面，也就是放到自己的库里，没有库的自己可以随便创建一个项目库。<br><img src="http://jns.img.bucket.ks3-cn-beijing.ksyun.com/skill/daily/e1ffdb7b-f305-4906-9e9d-e0930274e6cc.png" alt="PIC"><br>3.添加好之后，会出现下面这个样子，此时选好之后，就可以下载至本地，不建议直接使用在线使用的办法，亲测没有效，而且浏览器请求时间太长。<br><img src="http://jns.img.bucket.ks3-cn-beijing.ksyun.com/skill/daily/2ef3063c-d5b5-41e4-97fc-0bce6255e4b5.png" alt="PIC"><br>4.下好之后，需要将一行代码放到css文件中，也就是下下来的iconfont.css这个文件，或者直接在自己的项目html中引用这个css，但不建议这样做，会增加服务器请求次数。<br><img src="http://jns.img.bucket.ks3-cn-beijing.ksyun.com/skill/daily/197598ad-e3c9-4fd4-9eb5-7644276ef584.png" alt="PIC"><br>5.大胆的使用这些图标吧，使用方法就是直接自己的标签中加class=“iconfont”再加上对应图标的class就可以啦（对应的图标class在iconfont.css中，参考上图）。</p>
<h2 id="有一点要切记！图标的文件要放在与自己的css文件一起的文件夹中！否则图标显示不成功！"><a href="#有一点要切记！图标的文件要放在与自己的css文件一起的文件夹中！否则图标显示不成功！" class="headerlink" title="有一点要切记！图标的文件要放在与自己的css文件一起的文件夹中！否则图标显示不成功！"></a>有一点要切记！图标的文件要放在与自己的css文件一起的文件夹中！否则图标显示不成功！</h2><p>6.具体上面的iconfont.css代码干嘛用的，请参考慕课网，我这里就不详细讲了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Iconfont是什么？&quot;&gt;&lt;a href=&quot;#Iconfont是什么？&quot; class=&quot;headerlink&quot; title=&quot;Iconfont是什么？&quot;&gt;&lt;/a&gt;Iconfont是什么？&lt;/h1&gt;&lt;p&gt;iconfont是由阿里妈妈出品，国内射鸡师妹妹和前端小哥哥
    
    </summary>
    
      <category term="HTML &amp; CSS 学习笔记" scheme="https://github.com/ChangerHe/categories/HTML-CSS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML &amp; CSS" scheme="https://github.com/ChangerHe/tags/HTML-CSS/"/>
    
  </entry>
  
  <entry>
    <title>What is Flex?</title>
    <link href="https://github.com/ChangerHe/2017/06/17/What-is-Flex/"/>
    <id>https://github.com/ChangerHe/2017/06/17/What-is-Flex/</id>
    <published>2017-06-17T13:58:19.000Z</published>
    <updated>2017-06-18T16:02:27.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h1><p>Flex是Fllexible Box的缩写，也就是“弹性布局”，用来为盒子模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">	<span class="attribute">display</span>:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然，对于行内元素，也可以使用Flex布局。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">	<span class="attribute">display</span>:inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，当设为Flex布局以后，子元素的float、clear和vertical-align属性将会失效。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>采用Flex布局的元素，成为Flex容器，他的所有子元素自动成为容器成员，成为Flex项目（flex item)<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="PIC"><br>容器默认存在两根轴：水平主轴和垂直的交叉轴。主轴的开始位置（与边框的交叉点）叫做main start,结束为止叫做mian end；交叉轴的开始位置叫做cross start，结束为止叫做cross end。<br>项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<p>#容器的属性</p>
<h2 id="以下六个属性设置为容器上"><a href="#以下六个属性设置为容器上" class="headerlink" title="以下六个属性设置为容器上"></a>以下六个属性设置为容器上</h2><p>flex-direction<br>flex-wrap<br>flex-flow<br>justify-content<br>align-items<br>align-content</p>
<h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><p>flex-direction属性决定主轴的方向<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">	flex-direction: column-reverse； //主轴为垂直方向，起点在下沿。</div><div class="line">	flex-direction: column;  //主轴为垂直方向，起点在上沿。</div><div class="line">	flex-direction: row;   //默认值，主轴为水平方向，起点在左端。</div><div class="line">	flex-direction: row-reverse；  //主轴为垂直方向，起点在下沿。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应图示如下图：<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt="PIC"></p>
<h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线上，flex-wrap属性定义，如果一条轴线排不下，如何换行。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  flex-wrap: nowrap;    //不换行</div><div class="line">  flex-wrap: wrap;        //换行，第一行在上方</div><div class="line">  flex-wrap: wrap-reverse;    //换行，第一行在下方</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt="PIC"></p>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><p>justify-content属性定义了项目在主轴上的对齐方式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt="PIC"><br>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>
<h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><p>align-items属性定义项目在交叉轴上如何对齐。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt="PIC"><br>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>
<h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="PIC"><br>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。</p>
<h1 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h1><h2 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h2><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt="PIC"></p>
<h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h2><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt="PIC"><br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h2><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt="PIC"><br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>
<h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h2><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h2><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h2 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h2><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png" alt="PIC"><br>(以上内容均转载自阮一峰博客）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flex布局是什么？&quot;&gt;&lt;a href=&quot;#Flex布局是什么？&quot; class=&quot;headerlink&quot; title=&quot;Flex布局是什么？&quot;&gt;&lt;/a&gt;Flex布局是什么？&lt;/h1&gt;&lt;p&gt;Flex是Fllexible Box的缩写，也就是“弹性布局”，用来为盒子模
    
    </summary>
    
      <category term="HTML &amp; CSS 学习笔记" scheme="https://github.com/ChangerHe/categories/HTML-CSS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="What is Flex?" scheme="https://github.com/ChangerHe/tags/What-is-Flex/"/>
    
  </entry>
  
  <entry>
    <title>九宫格自适应布局的页面重构</title>
    <link href="https://github.com/ChangerHe/2017/06/15/nine-block-mission/"/>
    <id>https://github.com/ChangerHe/2017/06/15/nine-block-mission/</id>
    <published>2017-06-15T12:11:54.000Z</published>
    <updated>2017-06-22T15:38:26.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要这么“作死”"><a href="#为什么要这么“作死”" class="headerlink" title="为什么要这么“作死”"></a>为什么要这么“作死”</h1><p>本文使用JS方法，对之前本来比较简单的九宫格布局方法，进行了“暴力”重构<br>代码主要的构思<br>1.毋庸置疑，第一步，在meta中设定显示宽度为设备的宽度，缩放比例为1:1。<br>2.要想实现页面的高为100%,因页面存在继承属性，html继承了浏览器的高度，因此需要在设置盒子的高度为100%之前，设置html和body的高度为100%，才能实现子盒子的高度为100%。<br>3.最开始我的考虑是实现宽高为100%，然后子盒子再继续以百分比进行设置，虽然实现了九宫格，但是页面实在是太吃藕了，所以思考着添加JS方法，对页面进行重构。</p>
<h1 id="使用JS方法的重构思路"><a href="#使用JS方法的重构思路" class="headerlink" title="使用JS方法的重构思路"></a>使用JS方法的重构思路</h1><p>1.获取浏览器的宽度<br>2.比较大盒子的宽高，并取出宽高中较小的值，并将较小值赋值给大盒子的宽和高，这就实现了大盒子是个正方形且刚刚好接近覆盖整个页面。<br>3.此时的页面靠左，因此需考虑一个办法将页面居中，这里面再次使用了“暴力”方法进行了居中，居中方式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">con.style.marginLeft=cWidth/2-con.offsetWidth/2+<span class="string">'px'</span>;</div></pre></td></tr></table></figure></p>
<p>即是将浏览器宽度减去大盒子宽度除二，便是左边的margin的宽度啦。<br>4.对小盒子进行设置，小盒子的宽高是相对大盒子的，这就比较好设置了，进行遍历，设置它们的宽高相等就好啦。<br><img src="http://img3.imgtn.bdimg.com/it/u=4103638226,73711213&amp;fm=26&amp;gp=0.jpg" alt="PIC"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;Nine-Block Layout&lt;/title&gt;</div><div class="line">	&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">		*&#123;</div><div class="line">			margin: 0;</div><div class="line">			padding: 0;</div><div class="line">		&#125;</div><div class="line">		html,body&#123;</div><div class="line">			width: 100%;</div><div class="line">			height: 100%;</div><div class="line">		&#125;</div><div class="line">		.container&#123;</div><div class="line">			height:100%;</div><div class="line">			width: 100%;</div><div class="line">		&#125;</div><div class="line">		.box&#123;</div><div class="line">			height:29%;</div><div class="line">			width: 29%;</div><div class="line">			background: <span class="comment">#ff0;</span></div><div class="line">			<span class="built_in">float</span>:left;</div><div class="line">			margin:2%;</div><div class="line">			border-radius: 10px;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">	window.onload=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"></div><div class="line">		var con=document.getElementsByClassName(<span class="string">'container'</span>)[0]; //获取容器</div><div class="line">		var box=document.getElementsByClassName(<span class="string">'box'</span>);  //获取小盒子</div><div class="line">		//console.log(con.offsetHeight&gt;con.offsetWidth);</div><div class="line">		var cWidth=document.body.clientWidth;  //设置cWidth值为屏幕宽度</div><div class="line">		//console.log(cWidth)</div><div class="line">		<span class="keyword">function</span> <span class="function"><span class="title">compare</span></span>()&#123;  //比较大盒子宽高大小，取小值</div><div class="line">			<span class="keyword">if</span> (con.offsetHeight&gt;con.offsetWidth) &#123;</div><div class="line">			<span class="built_in">return</span> con.offsetWidth;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">return</span> con.offsetHeight;</div><div class="line">		&#125;&#125;</div><div class="line">		con.style.height=con.style.width=compare()+<span class="string">'px'</span>;  //将大盒子的宽高设置为较小值</div><div class="line">		con.style.marginLeft=cWidth/2-con.offsetWidth/2+<span class="string">'px'</span>;  //将坐外边距设置为屏幕宽减去大盒子宽度的一半</div><div class="line">		//console.log(con.style.width);</div><div class="line">		//console.log(con.style.height);</div><div class="line">		<span class="keyword">for</span> (var i = 0; i &lt; box.length; i++) &#123;  //将小盒子的宽高设为相等</div><div class="line">			box[i].style.width=box[0].offsetHeight+<span class="string">'px'</span>;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=<span class="string">"container"</span>&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么要这么“作死”&quot;&gt;&lt;a href=&quot;#为什么要这么“作死”&quot; class=&quot;headerlink&quot; title=&quot;为什么要这么“作死”&quot;&gt;&lt;/a&gt;为什么要这么“作死”&lt;/h1&gt;&lt;p&gt;本文使用JS方法，对之前本来比较简单的九宫格布局方法，进行了“暴力”重构&lt;b
    
    </summary>
    
      <category term="HTML &amp; CSS 学习笔记" scheme="https://github.com/ChangerHe/categories/HTML-CSS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML &amp; CSS" scheme="https://github.com/ChangerHe/tags/HTML-CSS/"/>
    
  </entry>
  
  <entry>
    <title>HEXO使用小结</title>
    <link href="https://github.com/ChangerHe/2017/06/15/hexo/"/>
    <id>https://github.com/ChangerHe/2017/06/15/hexo/</id>
    <published>2017-06-15T03:30:32.386Z</published>
    <updated>2017-06-22T15:38:59.431Z</updated>
    
    <content type="html"><![CDATA[<p>本文是我从自学前端开发以来，自己写的第一篇博客，为什么要写这一篇博客呢，原因有二，一是给自己没写过博客的hexo开个光，二是记录一下自己的每日所学所感。</p>
<h1 id="关于hexo的基础配置"><a href="#关于hexo的基础配置" class="headerlink" title="关于hexo的基础配置"></a>关于hexo的基础配置</h1><p>hexo的配置其实在网上已经有许多的大佬已经讲的一清二楚了，这里贴几个DALAO的链接，我在构建自己的博客的时候，就是以他们为参照的：</p>
<h4 id="1-holaOla-Hexo安装和配置"><a href="#1-holaOla-Hexo安装和配置" class="headerlink" title="1. holaOla :Hexo安装和配置"></a>1.<a href="http://www.jianshu.com/p/b7886271e21a" target="_blank" rel="external"> holaOla :Hexo安装和配置</a></h4><h4 id="2-Raspberry-Hexo-搭建博客-基础配置篇"><a href="#2-Raspberry-Hexo-搭建博客-基础配置篇" class="headerlink" title="2. Raspberry :Hexo 搭建博客-基础配置篇"></a>2.<a href="http://www.jianshu.com/p/df3edc4286d2" target="_blank" rel="external"> Raspberry :Hexo 搭建博客-基础配置篇</a></h4><p>以上基本可以在看完之后基本实现自己的bolg上线了，主要工作无非有四：<br>1.git的安装<br>2.GitHub的注册，本地SSHkey的设置<br>3.hexo的安装<br>4.node.js的环境搭建<br>实现了以上四项，自己的bolg基本上可以搭建成功。</p>
<h1 id="关于hexo的设置和配置"><a href="#关于hexo的设置和配置" class="headerlink" title="关于hexo的设置和配置"></a>关于hexo的设置和配置</h1><p>以下为hexo在\Hexo\themes\next_config.yml下的配置文件（笔者使用的是next作为主题）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">title:</div></pre></td></tr></table></figure>
<h3 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subtitle:</div></pre></td></tr></table></figure>
<h3 id="网站描述"><a href="#网站描述" class="headerlink" title="网站描述"></a>网站描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">description:</div></pre></td></tr></table></figure>
<h3 id="作者昵称"><a href="#作者昵称" class="headerlink" title="作者昵称"></a>作者昵称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">author:</div></pre></td></tr></table></figure>
<h3 id="网站语言，默认英语，设置简体汉语"><a href="#网站语言，默认英语，设置简体汉语" class="headerlink" title="网站语言，默认英语，设置简体汉语"></a>网站语言，默认英语，设置简体汉语</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">language: zh-Hans</div></pre></td></tr></table></figure>
<h3 id="时区，默认电脑时区"><a href="#时区，默认电脑时区" class="headerlink" title="时区，默认电脑时区"></a>时区，默认电脑时区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### timezone: </span></div><div class="line">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>
<h3 id="网址设置"><a href="#网址设置" class="headerlink" title="网址设置"></a>网址设置</h3><h3 id="如果网站是放在子目录中，将url设置成’"><a href="#如果网站是放在子目录中，将url设置成’" class="headerlink" title="如果网站是放在子目录中，将url设置成’"></a>如果网站是放在子目录中，将url设置成’</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://yoursite.com/child<span class="string">'</span></div></pre></td></tr></table></figure>
<p>将root设置成’/child/‘</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">If your site is put <span class="keyword">in</span> a subdirectory, <span class="built_in">set</span> url as <span class="string">'http://yoursite.com/child'</span> and root as <span class="string">'/child/'</span></div></pre></td></tr></table></figure>
<p>###网址<br>url: </p>
<h3 id="网站根目录。如果网站是放在子目录中，将root设置成’子目录名’"><a href="#网站根目录。如果网站是放在子目录中，将root设置成’子目录名’" class="headerlink" title="网站根目录。如果网站是放在子目录中，将root设置成’子目录名’"></a>网站根目录。如果网站是放在子目录中，将root设置成’子目录名’</h3><p>root: /</p>
<h3 id="文章链接地址格式-。即文章存放的目录。"><a href="#文章链接地址格式-。即文章存放的目录。" class="headerlink" title="文章链接地址格式 。即文章存放的目录。"></a>文章链接地址格式 。即文章存放的目录。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure>
<h3 id="目录设置"><a href="#目录设置" class="headerlink" title="目录设置"></a>目录设置</h3><h3 id="资源文件夹，放在里面的文件会上传到github中"><a href="#资源文件夹，放在里面的文件会上传到github中" class="headerlink" title="资源文件夹，放在里面的文件会上传到github中"></a>资源文件夹，放在里面的文件会上传到github中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source_dir: <span class="built_in">source</span></div></pre></td></tr></table></figure>
<h3 id="公共文件夹，存放生成的静态文件"><a href="#公共文件夹，存放生成的静态文件" class="headerlink" title="公共文件夹，存放生成的静态文件"></a>公共文件夹，存放生成的静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public_dir: public</div></pre></td></tr></table></figure>
<h3 id="标签文件夹，默认是tags。实际存放在source-tags中。"><a href="#标签文件夹，默认是tags。实际存放在source-tags中。" class="headerlink" title="标签文件夹，默认是tags。实际存放在source/tags中。"></a>标签文件夹，默认是tags。实际存放在source/tags中。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tag_dir: tags</div><div class="line">rss_dir: rss</div></pre></td></tr></table></figure>
<h3 id="档案文件夹，默认是archives。"><a href="#档案文件夹，默认是archives。" class="headerlink" title="档案文件夹，默认是archives。"></a>档案文件夹，默认是archives。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">archive_dir: archives</div></pre></td></tr></table></figure>
<h3 id="分类文件夹，默认是categories。实际存放在source-categories中。"><a href="#分类文件夹，默认是categories。实际存放在source-categories中。" class="headerlink" title="分类文件夹，默认是categories。实际存放在source/categories中。"></a>分类文件夹，默认是categories。实际存放在source/categories中。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">category_dir: categories</div></pre></td></tr></table></figure>
<h3 id="代码文件夹，默认是downloads-code"><a href="#代码文件夹，默认是downloads-code" class="headerlink" title="代码文件夹，默认是downloads/code"></a>代码文件夹，默认是downloads/code</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">code_dir: downloads/code</div></pre></td></tr></table></figure>
<h3 id="国际化文件夹，默认跟language相同"><a href="#国际化文件夹，默认跟language相同" class="headerlink" title="国际化文件夹，默认跟language相同"></a>国际化文件夹，默认跟language相同</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i18n_dir: :lang</div></pre></td></tr></table></figure>
<h3 id="不需要渲染的文件夹或文件夹-放在-中"><a href="#不需要渲染的文件夹或文件夹-放在-中" class="headerlink" title="不需要渲染的文件夹或文件夹,放在[]中"></a>不需要渲染的文件夹或文件夹,放在[]中</h3><h3 id="这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过"><a href="#这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过" class="headerlink" title="这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过"></a>这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">skip_render: [baidu_verify_R9MZjdMkXT.html, google0f8fac7da2b48ef8.html, README.md, 模板.md]</div></pre></td></tr></table></figure>
<h3 id="写作选项"><a href="#写作选项" class="headerlink" title="写作选项"></a>写作选项</h3><h3 id="新建博文（帖子）的默认名称"><a href="#新建博文（帖子）的默认名称" class="headerlink" title="新建博文（帖子）的默认名称"></a>新建博文（帖子）的默认名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#File name of new posts</span></div><div class="line">new_post_name: :title.md</div></pre></td></tr></table></figure>
<h3 id="默认布局模板是post，而不是draft和page"><a href="#默认布局模板是post，而不是draft和page" class="headerlink" title="默认布局模板是post，而不是draft和page"></a>默认布局模板是post，而不是draft和page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_layout: post</div></pre></td></tr></table></figure>
<h3 id="是否将标题转换成标题形式（首字母大写）"><a href="#是否将标题转换成标题形式（首字母大写）" class="headerlink" title="是否将标题转换成标题形式（首字母大写）"></a>是否将标题转换成标题形式（首字母大写）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div></pre></td></tr></table></figure>
<h3 id="在新标签页面中打开网页"><a href="#在新标签页面中打开网页" class="headerlink" title="在新标签页面中打开网页"></a>在新标签页面中打开网页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line">filename_case: 0</div></pre></td></tr></table></figure>
<h3 id="是否渲染草稿"><a href="#是否渲染草稿" class="headerlink" title="是否渲染草稿"></a>是否渲染草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render_drafts: <span class="literal">false</span></div></pre></td></tr></table></figure>
<h3 id="启动-Asset-文件夹"><a href="#启动-Asset-文件夹" class="headerlink" title="启动 Asset 文件夹"></a>启动 Asset 文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post_asset_folder: <span class="literal">false</span></div></pre></td></tr></table></figure>
<h3 id="把链接改为与根目录的相对位址"><a href="#把链接改为与根目录的相对位址" class="headerlink" title="把链接改为与根目录的相对位址"></a>把链接改为与根目录的相对位址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">relative_link: <span class="literal">false</span></div></pre></td></tr></table></figure>
<h3 id="显示未来的文章"><a href="#显示未来的文章" class="headerlink" title="显示未来的文章"></a>显示未来的文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">future: <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="代码块的设置"><a href="#代码块的设置" class="headerlink" title="代码块的设置"></a>代码块的设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">highlight:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>         <span class="comment">#使用代码高亮</span></div><div class="line">  line_number: <span class="literal">true</span> <span class="comment">#显示行号</span></div><div class="line">  auto_detect: <span class="literal">true</span>  <span class="comment">#自动检测语言</span></div><div class="line">  tab_replace:</div></pre></td></tr></table></figure>
<h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><h3 id="默认分类"><a href="#默认分类" class="headerlink" title="默认分类"></a>默认分类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_category: uncategorized</div></pre></td></tr></table></figure>
<h3 id="分类别名"><a href="#分类别名" class="headerlink" title="分类别名"></a>分类别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">category_map:</div></pre></td></tr></table></figure>
<h3 id="标签别名"><a href="#标签别名" class="headerlink" title="标签别名"></a>标签别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tag_map:</div></pre></td></tr></table></figure>
<h3 id="日期和时间格式"><a href="#日期和时间格式" class="headerlink" title="日期和时间格式"></a>日期和时间格式</h3><h3 id="Hexo-使用-Moment-js-来解析和显示时间。"><a href="#Hexo-使用-Moment-js-来解析和显示时间。" class="headerlink" title="Hexo 使用 Moment.js 来解析和显示时间。"></a>Hexo 使用 Moment.js 来解析和显示时间。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#You can customize the date format as defined in</span></div><div class="line"><span class="comment">#http://momentjs.com/docs/#/displaying/format/</span></div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div></pre></td></tr></table></figure>
<h3 id="分页配置"><a href="#分页配置" class="headerlink" title="分页配置"></a>分页配置</h3><h3 id="—————下面选项需要对应插件的支持—————"><a href="#—————下面选项需要对应插件的支持—————" class="headerlink" title="—————下面选项需要对应插件的支持—————"></a>—————下面选项需要对应插件的支持—————</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#npm install hexo-generator-index --save</span></div><div class="line"><span class="comment">#npm install hexo-generator-archive --save</span></div><div class="line"><span class="comment">#npm install hexo-generator-category --save</span></div><div class="line"><span class="comment">#npm install hexo-generator-tag --save</span></div><div class="line"><span class="comment">#Set per_page to 0 to disable pagination</span></div></pre></td></tr></table></figure>
<h3 id="每页显示的文章量"><a href="#每页显示的文章量" class="headerlink" title="每页显示的文章量"></a>每页显示的文章量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#per_page: 20</span></div></pre></td></tr></table></figure>
<h3 id="首页的分页设置"><a href="#首页的分页设置" class="headerlink" title="首页的分页设置"></a>首页的分页设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">index_generator:</div><div class="line">  per_page: 5</div></pre></td></tr></table></figure>
<h3 id="归档页的分页设置"><a href="#归档页的分页设置" class="headerlink" title="归档页的分页设置"></a>归档页的分页设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">archive_generator:</div><div class="line">  per_page: 30</div><div class="line">  yearly: <span class="literal">true</span></div><div class="line">  monthly: <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="标签页的分页设置"><a href="#标签页的分页设置" class="headerlink" title="标签页的分页设置"></a>标签页的分页设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tag_generator:</div><div class="line">  per_page: 20</div></pre></td></tr></table></figure>
<h3 id="分页路径，在public中可以看到"><a href="#分页路径，在public中可以看到" class="headerlink" title="分页路径，在public中可以看到"></a>分页路径，在public中可以看到</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pagination_dir: page</span></div></pre></td></tr></table></figure>
<h3 id="Extensions-拓展插件配置"><a href="#Extensions-拓展插件配置" class="headerlink" title="Extensions 拓展插件配置"></a>Extensions 拓展插件配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Plugins: https://hexo.io/plugins/</span></div><div class="line">plugins: </div><div class="line">baidusitemap: </div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure>
<h3 id="配置RSS"><a href="#配置RSS" class="headerlink" title="配置RSS"></a>配置RSS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">feed: </div><div class="line">  <span class="comment">#feed 类型 (atom/rss2)</span></div><div class="line">  <span class="built_in">type</span>: atom   </div><div class="line">  <span class="comment">#rss 路径</span></div><div class="line">  path: atom.xml  </div><div class="line">  <span class="comment">### 在 rss 中最多生成的文章数(0显示所有)</span></div><div class="line">  <span class="built_in">limit</span>: 0</div></pre></td></tr></table></figure>
<h3 id="自定义站点内容搜索"><a href="#自定义站点内容搜索" class="headerlink" title="自定义站点内容搜索"></a>自定义站点内容搜索</h3><h3 id="需要先安装插件："><a href="#需要先安装插件：" class="headerlink" title="需要先安装插件："></a>需要先安装插件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#npm install hexo-generator-search --save</span></div><div class="line">search:</div><div class="line">  path: search.xml</div></pre></td></tr></table></figure>
<h3 id="如只想索引文章，可设置为post"><a href="#如只想索引文章，可设置为post" class="headerlink" title="如只想索引文章，可设置为post"></a>如只想索引文章，可设置为post</h3><p>  field: all </p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Themes: https://hexo.io/themes/</span></div><div class="line"><span class="comment">#theme: false #禁用主题</span></div><div class="line"><span class="comment">#theme: landscape</span></div><div class="line">theme: next</div></pre></td></tr></table></figure>
<h3 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h3><p>#Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a><br>deploy:<br>  type: git</p>
<p>  #repo: <a href="https://github.com/changerhe.github.io.git">https://github.com/changerhe.github.io.git</a><br>  repo: </p>
<pre><code>#部署到github
github: git@github.com:changerhe/changerhe.github.io.git,master
#部署到coding.net。取消注释，可同时部署
#coding: git@git.coding.net:chngerhe/blog.git,coding-pages
</code></pre><p>  #type: baidu_url_submitter</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我从自学前端开发以来，自己写的第一篇博客，为什么要写这一篇博客呢，原因有二，一是给自己没写过博客的hexo开个光，二是记录一下自己的每日所学所感。&lt;/p&gt;
&lt;h1 id=&quot;关于hexo的基础配置&quot;&gt;&lt;a href=&quot;#关于hexo的基础配置&quot; class=&quot;heade
    
    </summary>
    
      <category term="Hexo-NexT搭建个人博客" scheme="https://github.com/ChangerHe/categories/Hexo-NexT%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="HEXO" scheme="https://github.com/ChangerHe/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>article title</title>
    <link href="https://github.com/ChangerHe/2017/06/15/article-title/"/>
    <id>https://github.com/ChangerHe/2017/06/15/article-title/</id>
    <published>2017-06-14T23:39:08.000Z</published>
    <updated>2017-06-22T15:39:16.127Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello World!&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Position属性知多少</title>
    <link href="https://github.com/ChangerHe/2017/06/14/hello-world/"/>
    <id>https://github.com/ChangerHe/2017/06/14/hello-world/</id>
    <published>2017-06-14T15:21:01.766Z</published>
    <updated>2017-06-22T15:39:07.332Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章关于Position属性值，等于对position这个属性中的值：static，relative,absolute,fixed进行一次总结，回忆一下学到的内容，加深一下理解。</p>
<h1 id="1-static："><a href="#1-static：" class="headerlink" title="1.static："></a>1.static：</h1><p>所有元素在默认情况之下的属性，在布局中的属性top、bottom、left、right在position为static的情况下是无效的。</p>
<h1 id="2-relative："><a href="#2-relative：" class="headerlink" title="2.relative："></a>2.relative：</h1><p>相对定位，可以设置性top、bottom、left、right属性值，但是请注意！虽然元素的位置会随着top、bottom、left、right属性值的改变而改变，但是其“真身”是留在之前的位置的，也就是说下方的元素不会因为其设置了relative属性，并改变其位置后而上移或下移。</p>
<p>有一点要特别注意的是：设置了relative属性后的的元素其display属性（不管你是inline还是inline-block还是block）之前是怎样现在还是怎样，这个是不变得。<br></p>
<h1 id="3-absolute："><a href="#3-absolute：" class="headerlink" title="3.absolute："></a>3.absolute：</h1><p>绝对定位，设置了absolute属性后，该元素会向其父节点去寻找它的“根源”，有一点要特别注意的是（对比第二条的特别注意看）：设置了absolute属性后的的元素其display属性（不管你是inline还是inline-block还是block）将会统一全部变成block且width自动成为auto，也就是会受到父元素的影响。</p>
<p>##（1）其父节点无position属性，父n个节点都没有position属性，那么其relative的“根     源”将以body为参照，也就是屏幕的0,0点。</p>
<p>##（2）其父节点有position属性且该属性设置为relative，那么好，这个节点就会以此父节     点为“根源”去做自己的定位了。定位top、bottom、left、right属性值为都是相对于父节点的0,0位置。</p>
<p>##（3）其父节点有position属性且该属性设置为absolute，我们很惊奇地会看到，握草这      两个元素居然重叠了而且重叠的毫无缝隙，什么鬼！，事实发现原来是这样的：设置为absolute后div自动变为width：auto；也就是说A-1和A-2都是width：auto；从而导致了它们的重叠，但是为何其“根源”变成了A-1，这是令我不解的地方。<br><img src="http://jns.img.bucket.ks3-cn-beijing.ksyun.com/skill/daily/59b881e4-a5a5-478d-86eb-e12bb585e202.png" alt="PIC"></p>
<p>##（4）其父节点有position属性该属性设置为absolute，而且其父父节点有position属性<br><img src="http://jns.img.bucket.ks3-cn-beijing.ksyun.com/skill/daily/79eb57d5-01f7-4086-8889-2db097042d25.png" alt="PIC"><br>该属性设置为relative，那么这个结果应该大家都猜得到，该元素及其父节点都会以其父父节点作为“根源”。</p>
<p>#（5）其父节点有position属性该属性设置为absolute，而且其父父节点有position属性该属性设置为absolute，情况和（3）类似，我就直接上图了。<br><img src="http://jns.img.bucket.ks3-cn-beijing.ksyun.com/skill/daily/1ce6acfa-cdf6-4cf0-af0d-d11005f58f6d.png" alt="PIC"></p>
<h1 id="4-fixed："><a href="#4-fixed：" class="headerlink" title="4.fixed："></a>4.fixed：</h1><p>该属性之前一直因为与IE6的兼容性问题，而被打入“冷宫”，fixed和absolute有许多共同点：</p>
<p>##（1）改变呈现样式，设置后元素将直接变为block。</p>
<p>##（2）会让元素脱离普通流，不会像relative一样，在页面的原来位置留下“真身”。</p>
<p>那么问题来了，他和absolute的区别在哪里？他们的区别就是，fixed属性永远会跟着body爸爸走，body爸爸去哪儿，它也去哪儿。而absolute属性可就要看情况了，具体看3里面我对absolute的介绍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章关于Position属性值，等于对position这个属性中的值：static，relative,absolute,fixed进行一次总结，回忆一下学到的内容，加深一下理解。&lt;/p&gt;
&lt;h1 id=&quot;1-static：&quot;&gt;&lt;a href=&quot;#1-static：&quot; c
    
    </summary>
    
      <category term="HTML &amp; CSS 学习笔记" scheme="https://github.com/ChangerHe/categories/HTML-CSS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML &amp; CSS" scheme="https://github.com/ChangerHe/tags/HTML-CSS/"/>
    
  </entry>
  
</feed>
